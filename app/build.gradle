apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'


android {
    compileSdkVersion compile_sdk_version
    defaultConfig {
        applicationId "com.paradigmadigital"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
        release {
//            storeFile file('company.keystore')
//            storePassword 'password'
//            keyAlias 'alias'
//            keyPassword 'password'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest {
            assets.srcDirs += 'src/debug/assets/'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        maxProcessCount 4
        javaMaxHeapSize "4g"
    }

}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    implementation "com.android.support:design:$support"
    implementation "com.android.support:support-annotations:$support"
    implementation "com.android.support:customtabs:$support"
    implementation "com.android.support.constraint:constraint-layout:$constraint"

    implementation "com.google.android.gms:play-services-auth:$playservices"

    implementation "co.zsmb:materialdrawer-kt:$materialdrawerkt"
    implementation "pub.devrel:easypermissions:$easy_permissions"
    implementation "com.q42:qlassified:$qlassified"

    implementation "android.arch.lifecycle:extensions:$archcomponentsver"
    kapt "android.arch.lifecycle:compiler:$archcomponentsver"
    implementation "android.arch.persistence.room:runtime:$archcomponentsver"
    kapt "android.arch.persistence.room:compiler:$archcomponentsver"

    kapt "com.jakewharton:butterknife-compiler:$butterknife"
    implementation "com.jakewharton:butterknife:$butterknife"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    implementation "com.google.dagger:dagger:$dagger"

    implementation "com.squareup.okhttp3:okhttp:$okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"

    implementation("com.crashlytics.sdk.android:crashlytics:$crashlver@aar") {
        transitive = true;
    }

    implementation "com.facebook.stetho:stetho:$estetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$estetho"

    testImplementation "junit:junit:$junit"
    testImplementation("com.squareup.assertj:assertj-android:$assertj") {
        exclude module: 'support-annotations'
    }
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation("com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin") {
        exclude module: 'kotlin-reflect'
        exclude module: 'kotlin-stdlib'
    }
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver"
    testImplementation "commons-io:commons-io:$commons"

    androidTestImplementation("com.squareup.assertj:assertj-android:$assertj") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test:runner:$runner") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:$espresso") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$espresso") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }
}

//apply plugin: 'com.google.gms.google-services'
